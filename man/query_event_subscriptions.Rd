% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/query_event_subscriptions.R
\name{query_event_subscriptions}
\alias{query_event_subscriptions}
\title{Query event subscriptions}
\usage{
query_event_subscriptions(query = NULL, env = "production")
}
\arguments{
\item{query}{(character) Query (see details below)}

\item{env}{(character) Repository environment. Can be: "production", "staging", or "development".}
}
\value{
(xml_document) A list of the subscriptions whose attributes match those specified in the query string (see details below). If a query string is omitted, all subscriptions in the subscription database will be returned for which the requesting user is authorized to read. If query parameters are included, they are used to filter that set of subscriptions based on their attributes.
}
\description{
Query event subscriptions
}
\details{
Query parameters are specified as key=value pairs, multiple pairs must be delimited with ampersands (&), and only a single value should be specified for a particular key. The following query parameter keys are allowed:

\itemize{
  \item creator
  \item scope
  \item identifier
  \item revision
  \item url
}

If a query parameter is specified, and a subscription's respective attribute does not match it, that subscription will not be included in the group of subscriptions returned. If scope, identifier, or revision are used, their values must together constitute a syntactically and semantically correct EML packageId (i.e. "scope.identifier.revision") - either partial or complete. If url is used, its value must not contain ampersands. Therefore, if a subscription's URL contains ampersands, it cannot be filtered based on its URL.
}
\note{
User authentication is required (see \code{login()})
}
\examples{
\dontrun{

login()

# Query subscriptions
subscriptions <- query_event_subscriptions(env = "staging")
subscriptions
#> {xml_document}
#> <subscriptions>
#> [1] <subscription type="eml">\n  <id>21</id>\n  <creator>uid=csmith, ...
#> [2] <subscription type="eml">\n  <id>27</id>\n  <creator>uid=csmith, ...
#> [3] <subscription type="eml">\n  <id>51</id>\n  <creator>uid=csmith, ...

# Show first
xml2::xml_find_first(subscriptions, "subscription")
#> {xml_node}
#> <subscription type="eml">
#> [1] <id>21</id>
#> [2] <creator>uid=csmith,o=EDI,dc=edirepository,dc=org</creator>
#> [3] <packageId>edi.94</packageId>
#> [4] <url>https://regan.edirepository.org/ecocom-listener</url>

logout()
}

}
